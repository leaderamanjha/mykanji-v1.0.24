import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA70001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.whiteA70001,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray600,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 4,
        space: 4,
        color: appTheme.gray90004,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.green80001,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray90002,
          fontSize: 14.fSize,
          fontFamily: 'Cabin',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 12.fSize,
          fontFamily: 'SF Pro',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 32.fSize,
          fontFamily: 'Cabin',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray90002,
          fontSize: 28.fSize,
          fontFamily: 'Cabin',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray90002,
          fontSize: 24.fSize,
          fontFamily: 'Century Gothic',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray90005,
          fontSize: 13.fSize,
          fontFamily: 'SF Pro',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray90005,
          fontSize: 10.fSize,
          fontFamily: 'SF Pro',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 22.fSize,
          fontFamily: 'Cabin',
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Cabin',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray5001,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0X0C101828),
    primaryContainer: Color(0XFF636366),

    // Error colors
    errorContainer: Color(0XFF2B2730),
    onErrorContainer: Color(0XFFE8DEF8),

    // On colors(text colors)
    onPrimary: Color(0XFFAE90C2),
    onPrimaryContainer: Color(0X0F101828),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue300 => Color(0XFF56AEFF);
  Color get blueA400 => Color(0XFF1877F2);
  Color get blueA70014 => Color(0X14205CFF);

  // BlueGray
  Color get blueGray100 => Color(0XFFCAC4D0);
  Color get blueGray10001 => Color(0XFFCFD4DC);
  Color get blueGray10002 => Color(0XFFD1D1D6);
  Color get blueGray400 => Color(0XFF8E8E93);
  Color get blueGray50 => Color(0XFFEAECF0);
  Color get blueGray500 => Color(0XFF667084);
  Color get blueGray700 => Color(0XFF563B69);
  Color get blueGray800 => Color(0XFF344053);
  Color get blueGray80001 => Color(0XFF343B45);
  Color get blueGray900 => Color(0XFF333232);
  Color get blueGray90001 => Color(0XFF263238);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFD0BCFF);
  Color get deepPurple10001 => Color(0XFFD7C7E0);
  Color get deepPurple200 => Color(0XFFC2ACD1);
  Color get deepPurple50 => Color(0XFFEBE3F0);
  Color get deepPurple500 => Color(0XFF6750A4);
  Color get deepPurple5001 => Color(0XFFECE6F0);
  Color get deepPurple5002 => Color(0XFFE8DEF8);

  // Gray
  Color get gray100 => Color(0XFFF7F4F9);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray300 => Color(0XFFE6E0E9);
  Color get gray400 => Color(0XFFCAC5CD);
  Color get gray50 => Color(0XFFFBFBFB);
  Color get gray5001 => Color(0XFFFBF9FC);
  Color get gray5002 => Color(0XFFFEF7FF);
  Color get gray600 => Color(0XFF79747E);
  Color get gray700 => Color(0XFF5A565D);
  Color get gray800 => Color(0XFF49454F);
  Color get gray80001 => Color(0XFF3D3D3D);
  Color get gray80002 => Color(0XFF3A3A3C);
  Color get gray900 => Color(0XFF1D1B20);
  Color get gray90001 => Color(0XFF1C1B1F);
  Color get gray90002 => Color(0XFF231D27);
  Color get gray90003 => Color(0XFF1D192B);
  Color get gray90004 => Color(0XFF202124);
  Color get gray90005 => Color(0XFF1C1C1E);

  // Green
  Color get green800 => Color(0XFF09A206);
  Color get green80001 => Color(0XFF09A106);
  Color get green900 => Color(0XFF007D0C);
  Color get green90001 => Color(0XFF007112);
  Color get greenA700 => Color(0XFF1EB347);

  // LightBlue
  Color get lightBlueA700 => Color(0XFF0A84FF);

  // Orange
  Color get orangeA100 => Color(0XFFFFD272);

  // Purple
  Color get purple50 => Color(0XFFF3EDF7);

  // Red
  Color get red200 => Color(0XFFF6A192);
  Color get red500 => Color(0XFFEA4335);
  Color get red900 => Color(0XFFB3261E);

  // Teal
  Color get teal900 => Color(0XFF095B4B);

  // White
  Color get whiteA700 => Color(0XFFFDFDFD);
  Color get whiteA70001 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
